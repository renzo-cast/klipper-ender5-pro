# RENAME to printer.cfg
# This file contains pin mappings for the Creality "v4.2.2" board. To
# use this config, during "make menuconfig" select the STM32F103 with
# a "28KiB bootloader" and serial (on USART1 PA10/PA9) communication.

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

# See docs/Config_Reference.md for a description of parameters.
# Original from https://www.reddit.com/r/ender5/comments/r8b9u7/klipper_settings_for_ender_5_pro_on_creality_422/
# Edits from https://www.reddit.com/r/ender5/comments/qqa1tp/how_to_set_up_klipper_on_stock_ender_5_with_32bit/


#[virtual_sdcard]
#path: ~/gcode_files

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
baud: 115200
restart_method: command

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    100, 100, 20  # an example
    
#[input_shaper]
#shaper_freq_x: 59.4
#shaper_type_x: mzv
#shaper_freq_y: 69.4
#shaper_type_y: mzv

[printer]
max_accel: 10400

[display_status]

[pause_resume]

[stepper_x]
step_pin: PC2
dir_pin: PB9 # or !PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 230 # could be 235 to match max
position_max: 230 # or 235
homing_speed: 80

[stepper_y]
step_pin: PB8
dir_pin: PB7 # or !PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA7 # ^PA6
position_endstop: 217 # could be 235 to match max
position_max: 217 # or 235
homing_speed: 80

[stepper_z]
step_pin: PB6
dir_pin: PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 4
endstop_pin: ^PA6 #^PA7
endstop_pin: probe:z_virtual_endstop
# position_endstop: 0.0
position_max: 310
position_min: -2

[extruder]
max_extrude_only_distance: 101
min_extrude_temp: 0
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 33.13648 #31.861 # 33.019
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC5
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 260
pressure_advance: 0.93
# E-Steps: 99.34

[verify_heater extruder]
check_gain_time: 30


[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 135

[fan]
# [fan_generic fan]
pin: PA0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3500
max_z_velocity: 5
max_z_accel: 100

[input_shaper]
shaper_freq_x: 58.1
shaper_freq_y: 38.7
shaper_type: ei

[gcode_arcs]
resolution: 1.0

[display] # RET6 12864 LCD
lcd_type: st7920
cs_pin: PB12
sclk_pin: PB13
sid_pin: PB15
encoder_pins: ^PB14, ^PB10
click_pin: ^!PB2

[output_pin BEEPER_Pin]
pin: PC6
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1

[bed_screws]
screw1: 190,208
screw2: 20,208
screw3: 20,38
screw4: 190,38

[bltouch]
sensor_pin: ^PB1
control_pin: PB0
# pin_up_touch_mode_reports_triggered: False
# probe_with_touch_mode: True
x_offset: -30
y_offset: -2
#z_offset: 2
speed: 2.0
samples: 2
sample_retract_dist: 7.0

#[filament_switch_sensor endstop]
#pause_on_runout: True
#event_delay: 3.0
#pause_delay: 0.5
#switch_pin: ^PA7


[safe_z_home]
home_xy_position: 100, 100 # Change coordinates to the center of your print bed
speed: 60
z_hop: 10                 # Move up 10mm
z_hop_speed: 10

[bed_mesh]
speed: 200
horizontal_move_z: 3
mesh_min: 10, 10
mesh_max: 160, 180
probe_count: 3, 3

[save_variables]
filename: ~/variables.cfg ; variable storage file

[gcode_macro START_PRINT]
description: Start the print
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  
  M140 S{BED_TEMP}
  # Use absolute coordinates
  G90
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
    
  LEVEL_BED_ADVANCED MAX_AGE=10 ; probe mesh eventually
  
  # Move the nozzle near the bed
  G1 Z5 F3000
  # Move the nozzle very close to the bed
  G1 Z0.15 F300
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y+5} F6000     ; park toolhead at front
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        G4 S600                                                                              ; wait for 10mins to change the filament. its easier while it is still hot
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  # Absolute positionning
  G90
  # Present print
  G1 X0 Y00 F9000 ; move print head out of the way
  G1 Z200 F600 ; Move print bed close to the bottom
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  #SDCARD_RESET_FILE
  PRINT_END
  TURN_OFF_HEATERS
  BASE_CANCEL_PRINT
    

[gcode_macro END_PRINT]
variable_machine_depth: 235
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Relative positionning
    G91
    # Retract and raise Z
    G1 Z0.2 E-2 F2400
    # Wipe out
    G1 X5 Y5 F3000
    # Raise Z more
    G1 Z10
    # Absolute positionning
    G90
    # Present print
    G1 X0 Y00 F9000 ; move print head out of the way
    # G1 Z100 F600 ; Move print bed close to the bottom
    # SAVE_CONFIG if a mesh was probed in START_PRINT
    SAVE_IF_SET     
    # Disable steppers
    M84
    # Print message on LCD
    M117 That's All Folks
  
# from: https://www.reddit.com/r/klippers/comments/qdr0g9/my_gcode_macro_to_mesh_level_the_bed_every_10th/  
; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(1)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
    @BEDLEVELVISUALIZER	; instruct plugin to start recording responses from printer.
    BED_MESH_CALIBRATE
    BED_MESH_OUTPUT
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
    G28
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
    G28
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}
    
# from https://www.reddit.com/r/ender5/comments/qqa1tp/how_to_set_up_klipper_on_stock_ender_5_with_32bit/
[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
    {% set F = 1 %}
    {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
    {% set F = 0 %}
    {% else %}
    {% set F = 1/S %} ;convert frequency to seconds
    {% endif %}
    SET_PIN PIN=BEEPER_Pin VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=BEEPER_Pin VALUE=0
    
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 68.376
#*# pid_ki = 1.172
#*# pid_kd = 997.434
#*#
#*# [bltouch]
#*# z_offset = 1.750
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.395625, -0.370000, -0.371250
#*# 	  -0.231875, -0.234375, -0.201875
#*# 	  -0.162500, -0.201250, -0.178125
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = lagrange
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 3
#*# max_y = 180.0
#*# mesh_x_pps = 2
#*# max_x = 160.0
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 20.785
#*# pid_ki = 1.019
#*# pid_kd = 106.004
